CCS PCM C Compiler, Version 4.120, 31882               06-oct.-18 22:43

               Filename: C:\Users\Public\Apoyos\DiseñoMecatrónico\PIC16F1823\E-SDigitales\I2C_Slave.lst

               ROM used: 113 words (6%)
                         Largest free fragment is 1934
               RAM used: 10 (8%) at main() level
                         27 (21%) worst case
               Stack:    1 worst case (0 in main + 1 for interrupts)

*
0000:  MOVLP  00
0001:  GOTO   04C
0002:  NOP
*
0004:  CLRF   03
0005:  CLRF   0A
0006:  MOVLB  00
0007:  MOVF   20,W
0008:  MOVWF  24
0009:  MOVF   21,W
000A:  MOVWF  25
000B:  MOVF   22,W
000C:  MOVWF  26
000D:  MOVF   23,W
000E:  MOVWF  27
000F:  CLRF   05
0010:  MOVLW  91
0011:  MOVWF  04
0012:  BTFSS  00.3
0013:  GOTO   016
0014:  BTFSC  11.3
0015:  GOTO   01F
0016:  MOVF   24,W
0017:  MOVWF  20
0018:  MOVF   25,W
0019:  MOVWF  21
001A:  MOVF   26,W
001B:  MOVWF  22
001C:  MOVF   27,W
001D:  MOVWF  23
001E:  RETFIE
.................... /* 
....................    Código fuente para Esclavo de I2C 
.................... */ 
.................... #include <16F1823.h> 
.................... //////// Standard Header file for the PIC16F1823 device //////////////// 
.................... #device PIC16F1823 
.................... #list 
....................  
....................  
.................... #fuses NOWDT, NOMCLR, PUT 
.................... #use delay (int = 32 MHz) 
.................... #use RS232(baud = 9600, XMIT = pin_c4, RCV = pin_c5) 
.................... #use I2C(slave, SDA = pin_c1, SCL = pin_c0, ADDRESS = 0x50, FORCE_HW, STREAM = Slave1) // Maestro-esclavo 
*
0034:  MOVLB  04
0035:  MOVF   11,W
0036:  MOVLB  00
0037:  MOVF   2A,W
0038:  MOVLB  04
0039:  MOVWF  11
003A:  BSF    15.4
003B:  MOVLB  00
003C:  BCF    11.3
003D:  MOVLB  04
003E:  BTFSC  14.0
003F:  GOTO   03E
0040:  MOVLB  00
0041:  CLRF   21
0042:  MOVLB  04
0043:  BTFSS  15.4
0044:  GOTO   048
0045:  MOVLB  00
0046:  INCF   21,F
0047:  MOVLB  04
0048:  MOVLB  00
.................... #INT_SSP 
.................... void I2C() { 
*
001F:  MOVLB  04
0020:  BTFSC  14.5
0021:  GOTO   02A
0022:  MOVLB  00
0023:  CLRF   28
0024:  MOVLB  04
0025:  BTFSS  14.2
0026:  GOTO   02A
0027:  MOVLB  00
0028:  BSF    28.7
0029:  MOVLB  04
002A:  MOVLB  00
002B:  MOVF   28,W
002C:  INCF   28,F
002D:  MOVWF  29
....................    int state = I2C_ISR_STATE(Slave1); 
....................     
....................    if(state >= 0x80) { 
002E:  MOVF   29,W
002F:  SUBLW  7F
0030:  BTFSC  03.0
0031:  GOTO   049
....................       I2C_WRITE(Slave1,'A'); 
0032:  MOVLW  41
0033:  MOVWF  2A
....................    } 
.................... } 
....................  
....................  
*
0049:  BCF    11.3
004A:  MOVLP  00
004B:  GOTO   016
.................... int main(void) { 
004C:  CLRF   05
004D:  CLRF   04
004E:  MOVLW  1F
004F:  ANDWF  03,F
0050:  MOVLW  F4
0051:  MOVLB  01
0052:  MOVWF  19
0053:  BCF    0E.4
0054:  MOVLB  02
0055:  BSF    0E.4
0056:  MOVLB  01
0057:  BSF    0E.0
0058:  BSF    0E.1
0059:  MOVLW  50
005A:  MOVLB  04
005B:  MOVWF  12
005C:  MOVLW  36
005D:  MOVWF  15
005E:  MOVLW  03
005F:  MOVLB  00
0060:  MOVWF  28
0061:  MOVLB  03
0062:  CLRF   0C
0063:  CLRF   0E
0064:  MOVLB  02
0065:  CLRF   12
0066:  CLRF   11
0067:  CLRF   14
0068:  CLRF   13
....................    ENABLE_INTERRUPTS(INT_SSP); 
0069:  MOVLB  01
006A:  BSF    11.3
....................    ENABLE_INTERRUPTS(GLOBAL); 
006B:  MOVLW  C0
006C:  IORWF  0B,F
....................     
....................    while(true) {} 
006D:  GOTO   06D
....................  
....................    return 0; 
006E:  MOVLW  00
006F:  MOVLB  00
0070:  MOVWF  21
.................... } 
0071:  SLEEP

Configuration Fuses:
   Word  1: 3F84   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1EFF   NOWRT PLL_SW STVREN BORV19 NODEBUG NOLVP
