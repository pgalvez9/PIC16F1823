CCS PCM C Compiler, Version 4.120, 11074               06-oct.-18 16:55

               Filename: C:\Users\Peter\Desktop\GitClass\P16F1823\i2c\slave.lst

               ROM used: 386 words (19%)
                         Largest free fragment is 1661
               RAM used: 12 (9%) at main() level
                         34 (27%) worst case
               Stack:    4 worst case (1 in main + 3 for interrupts)

*
0000:  MOVLP  00
0001:  GOTO   154
0002:  NOP
*
0004:  CLRF   03
0005:  CLRF   0A
0006:  MOVLB  00
0007:  MOVF   20,W
0008:  MOVWF  24
0009:  MOVF   21,W
000A:  MOVWF  25
000B:  MOVF   22,W
000C:  MOVWF  26
000D:  MOVF   23,W
000E:  MOVWF  27
000F:  CLRF   05
0010:  MOVLW  91
0011:  MOVWF  04
0012:  BTFSS  00.3
0013:  GOTO   016
0014:  BTFSC  11.3
0015:  GOTO   0F4
0016:  MOVF   24,W
0017:  MOVWF  20
0018:  MOVF   25,W
0019:  MOVWF  21
001A:  MOVF   26,W
001B:  MOVWF  22
001C:  MOVF   27,W
001D:  MOVWF  23
001E:  RETFIE
.................... #include <16f1823.h> 
.................... //////// Standard Header file for the PIC16F1823 device //////////////// 
.................... #device PIC16F1823 
.................... #list 
....................  
.................... #fuses NOWDT, PUT, NOMCLR //No watch dog timer, power up timer, no master clear 
.................... #use delay(int=32MHZ)    
*
00DF:  MOVLW  20
00E0:  MOVWF  05
00E1:  MOVLW  0D
00E2:  MOVWF  04
00E3:  MOVF   00,W
00E4:  BTFSC  03.2
00E5:  GOTO   0F3
00E6:  MOVLW  0A
00E7:  MOVWF  21
00E8:  CLRF   20
00E9:  DECFSZ 20,F
00EA:  GOTO   0E9
00EB:  DECFSZ 21,F
00EC:  GOTO   0E8
00ED:  MOVLW  5F
00EE:  MOVWF  20
00EF:  DECFSZ 20,F
00F0:  GOTO   0EF
00F1:  DECFSZ 00,F
00F2:  GOTO   0E6
00F3:  RETURN
.................... #use RS232(baud=9600,XMIT=pin_c4,RCV=pin_c5) 
*
001F:  MOVLB  01
0020:  BCF    0E.4
0021:  MOVLB  02
0022:  BCF    0E.4
0023:  MOVLW  08
0024:  MOVLB  00
0025:  MOVWF  21
0026:  GOTO   027
0027:  NOP
0028:  BSF    21.7
0029:  GOTO   03C
002A:  BCF    21.7
002B:  RRF    31,F
002C:  MOVLB  02
002D:  BTFSC  03.0
002E:  BSF    0E.4
002F:  BTFSS  03.0
0030:  BCF    0E.4
0031:  MOVLB  00
0032:  BSF    21.6
0033:  GOTO   03C
0034:  BCF    21.6
0035:  DECFSZ 21,F
0036:  GOTO   02B
0037:  GOTO   038
0038:  NOP
0039:  MOVLB  02
003A:  BSF    0E.4
003B:  MOVLB  00
003C:  MOVLW  01
003D:  MOVWF  20
003E:  CLRF   04
003F:  DECFSZ 04,F
0040:  GOTO   03F
0041:  DECFSZ 20,F
0042:  GOTO   03E
0043:  MOVLW  0D
0044:  MOVWF  04
0045:  DECFSZ 04,F
0046:  GOTO   045
0047:  GOTO   048
0048:  BTFSC  21.7
0049:  GOTO   02A
004A:  BTFSC  21.6
004B:  GOTO   034
004C:  RETURN
.................... #use I2C(slave,SDA=pin_c1,SCL=pin_c0,ADDRESS=0x60, FORCE_HW, STREAM=S1,fast)//maestro o esclavo,cuál pin es SDA, , forzar a que sea hw 
*
0127:  MOVLB  04
0128:  MOVF   11,W
0129:  MOVLB  00
012A:  MOVF   2D,W
012B:  MOVLB  04
012C:  MOVWF  11
012D:  BSF    15.4
012E:  MOVLB  00
012F:  BCF    11.3
0130:  MOVLB  04
0131:  BTFSC  14.0
0132:  GOTO   131
0133:  MOVLB  00
0134:  CLRF   21
0135:  MOVLB  04
0136:  BTFSS  15.4
0137:  GOTO   13B
0138:  MOVLB  00
0139:  INCF   21,F
013A:  MOVLB  04
.................... char a = 'a'; 
.................... #INT_SSP 
.................... void I2Cs() 
.................... { 
....................     
....................    int8 state; 
....................    state = i2c_isr_state(S1); 
*
00F4:  MOVLB  04
00F5:  BTFSC  14.5
00F6:  GOTO   0FF
00F7:  MOVLB  00
00F8:  CLRF   2A
00F9:  MOVLB  04
00FA:  BTFSS  14.2
00FB:  GOTO   0FF
00FC:  MOVLB  00
00FD:  BSF    2A.7
00FE:  MOVLB  04
00FF:  MOVLB  00
0100:  MOVF   2A,W
0101:  INCF   2A,F
0102:  MOVWF  2C
....................    printf("entre a int %u",state); 
0103:  MOVLW  42
0104:  MOVLB  03
0105:  MOVWF  11
0106:  MOVLW  01
0107:  MOVWF  12
0108:  BCF    03.0
0109:  MOVLW  0C
010A:  MOVLB  00
010B:  MOVWF  2D
010C:  CALL   04D
010D:  MOVF   2C,W
010E:  MOVWF  2D
010F:  MOVLW  1B
0110:  MOVWF  2E
0111:  CALL   0AA
....................    if (state>=0x80) 
0112:  MOVF   2C,W
0113:  SUBLW  7F
0114:  BTFSC  03.0
0115:  GOTO   13F
....................    { 
....................     
....................       printf("entre a state 80 %u",state); 
0116:  MOVLW  4A
0117:  MOVLB  03
0118:  MOVWF  11
0119:  MOVLW  01
011A:  MOVWF  12
011B:  BCF    03.0
011C:  MOVLW  11
011D:  MOVLB  00
011E:  MOVWF  2D
011F:  CALL   04D
0120:  MOVF   2C,W
0121:  MOVWF  2D
0122:  MOVLW  1B
0123:  MOVWF  2E
0124:  CALL   0AA
....................       I2C_WRITE(a); 
0125:  MOVF   29,W
0126:  MOVWF  2D
....................       delay_ms(100); 
*
013B:  MOVLW  64
013C:  MOVLB  00
013D:  MOVWF  2D
013E:  CALL   0DF
....................        
....................    } 
.................... } 
....................  
013F:  BCF    11.3
0140:  MOVLP  00
0141:  GOTO   016
.................... void main() 
.................... { 
*
0154:  CLRF   05
0155:  CLRF   04
0156:  MOVLW  1F
0157:  ANDWF  03,F
0158:  MOVLW  F4
0159:  MOVLB  01
015A:  MOVWF  19
015B:  BCF    0E.4
015C:  MOVLB  02
015D:  BSF    0E.4
015E:  MOVLB  01
015F:  BSF    0E.0
0160:  BSF    0E.1
0161:  MOVLW  60
0162:  MOVLB  04
0163:  MOVWF  12
0164:  MOVLW  36
0165:  MOVWF  15
0166:  MOVLW  61
0167:  MOVLB  00
0168:  MOVWF  29
0169:  MOVLW  03
016A:  MOVWF  2A
016B:  MOVLB  03
016C:  CLRF   0C
016D:  CLRF   0E
016E:  MOVLB  02
016F:  CLRF   12
0170:  CLRF   11
0171:  CLRF   14
0172:  CLRF   13
....................    ENABLE_INTERRUPTS(INT_SSP); 
0173:  MOVLB  01
0174:  BSF    11.3
....................    ENABLE_INTERRUPTS(GLOBAL); 
0175:  MOVLW  C0
0176:  IORWF  0B,F
0177:  MOVLB  00
0178:  CLRF   28
0179:  BTFSC  0B.7
017A:  BSF    28.7
017B:  BCF    0B.7
....................    while(true) 
....................    { 
....................        
....................    delay_ms(100); 
017C:  MOVLW  64
017D:  MOVWF  2D
017E:  CALL   0DF
017F:  BTFSC  28.7
0180:  BSF    0B.7
....................    } 
0181:  GOTO   178
.................... } 
0182:  SLEEP

Configuration Fuses:
   Word  1: 3F84   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1EFF   NOWRT PLL_SW STVREN BORV19 NODEBUG NOLVP
